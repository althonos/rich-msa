# https://gist.github.com/althonos/6914b896789d3f2078d1e6237642c35c

# --- Setuptools metadata ----------------------------------------------------

[metadata]
name = rich-msa
version = attr: rich_msa.__version__
author = Martin Larralde
author_email = martin.larralde@embl.de
url = https://github.com/althonos/rich-msa
description = A Rich renderable for viewing Multiple Sequence Alignments in the terminal.
long_description = file: README.md
long_description_content_type = text/markdown
license = MIT
platform = posix
keywords = bioinformatics, protein, alignment, viewer, domains
classifier =
    Development Status :: 4 - Beta
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: C
    Programming Language :: Cython
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: Python :: Implementation :: PyPy
    Topic :: Scientific/Engineering :: Bio-Informatics
    Topic :: Scientific/Engineering :: Medical Science Apps.
    Typing :: Typed
project_urls =
    Bug Tracker = https://github.com/althonos/rich-msa/issues
    Changelog = https://github.com/althonos/rich-msa/blob/master/CHANGELOG.md
    Builds = https://git.embl.de/larralde/rich-msa/-/pipelines
    PyPI = https://pypi.org/project/rich-msa

[options]
zip_safe = true
packages = rich_msa
python_requires = >=3.6
test_suite = tests
include_package_data = true
setup_requires =
    setuptools >=46.4
install_requires =
    rich

[options.package_data]
rich_msa = py.typed

# --- Python tools configuration ---------------------------------------------

[coverage:report]
include = rich_msa/*.py
show_missing = true
exclude_lines =
    pragma: no cover
    if typing.TYPE_CHECKING:
    @abc.abstractmethod
    @abc.abstractproperty
    raise NotImplementedError
    return NotImplemented

[mypy]
disallow_any_decorated = true
disallow_any_generics = true
disallow_any_unimported = false
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_return_any = true
